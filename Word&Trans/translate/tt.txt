Code obfuscation is widely used by software developers to
protect intellectual property, and malware writers to hamper
program analysis. However, there seems to be little work on
systematic evaluations of effectiveness of obfuscation techniques against automated program analysis. The result is
that we have no methodical way of knowing what kinds of
automated analyses an obfuscation method can withstand.
This paper addresses the problem of characterizing the
resilience of code obfuscation transformations against automated symbolic execution attacks, complementing existing
works that measure the potency of obfuscation transformations against human-assisted attacks through user studies.
We evaluated our approach over 5000 different C programs,
which have each been obfuscated using existing implementations of obfuscation transformations. The results show
that many existing obfuscation transformations, such as virtualization, stand little chance of withstanding symbolicexecution based deobfuscation. A crucial and perhaps surprising observation we make is that symbolic-execution based
deobfuscators can easily deobfuscate transformations that
preserve program semantics. On the other hand, we present
new obfuscation transformations that change program behavior in subtle yet acceptable ways, and show that they
can render symbolic-execution based deobfuscation analysis
ineffective in practice.