Binaries recovered with BinRec may encounter unrecovered
paths during testing or after deployment due to the cover￾age limitation of dynamic analysis (see Section 3.1). BinRec
handles these control flow misses by forcing the recovered
binary to invoke a control flow miss handler whenever it
encounters an unrecovered path. Several control flow miss
handlers are available.
The log hander logs the instruction pointer value that is
missing from the recovered binary, and then aborts execution.
This mode is useful when divergence between the recovered
binary and the original is more dangerous than program
termination.
The fallback handler diverts execution from the recov￾ered code into the original code of the input binary. This
involves marshalling of the emulated CPU state in the re￾covered code into the physical state of the original binary
(see also Section 3.3.1), and then jumping to the original
binary at the intended address. This miss handler is only
available when the original binary and recovered binary tar￾get the same architecture. It is ideal for use cases that require
program instrumentation without unexpected termination.
Note that in a mitigation scenario, in which BinRec is used
to augment lifted code with security instrumentation, this
requires a binary-level mitigation for the remaining binary
code. The binary mitigation may be heavyweight and hence
inefficient. However, the fallback code is not expected to
be on the hot path since it is not exercised by the lifting
workload.
The incremental lifting handler feeds back the logged
missing instruction pointers into the dynamic lifting engine,
where we capture a trace covering the new control-flow edge,
and merge it with the existing traces. Using this incremental
lifting paradigm, the recovered binary can be continuously updated. Our current incremental lifting prototype lifts in￾structions until the next conditional control-flow transfer.
The recovered program can invoke the fallback miss han￾dler, or the log handler. Meanwhile, the dynamic lifting en￾gine can generate one or more new program traces via the
logged instruction pointers in an asynchronous background
process. We incorporate the new and existing traces to gen￾erate a new recovered binary.
An advantage of incremental lifting is it directly lifts new
code without the need to reproduce the (explicit or implicit)
input that triggers the miss during lifting. Consider a pro￾gram feature that is only exercised due to unconstrained
system randomness on the test system. There is no need to
isolate and constrain the source of randomness to replicate
it on the lifting system. Alternatively, there is no need to
wait for non-deterministic fuzzing or concolic execution
techniques to drive execution through the new paths.
Finally, when it is known that the tracing stage has already
covered all paths that implement the features of interest, the
miss handler can be optimized out completely. This is useful
for aggressive optimization scenarios in which the lifting
input is known to cover all necessary code, and eliminating
a branch leads to new optimization opportunities.