We seek to pinpoint the buggy code fragments in decompilers
that lead to these defects. IDA-Pro and JEB3 are commercial tools
and therefore we have no way of performing root cause analysis.
Radare2/Ghidra and RetDec both have source code available online, although their accompanying documents and code comments
are merely provided. At this step, we spent extensive manual efforts (over six weeks; in total about 350 man-hours) to analyze
all 913 (187 + 346 + 380) decompiler flaws detected from RetDec
(in total 178,732 LOC), and all 179 (53 + 126) decompiler flaws in
Radare2/Ghidra (the Ghidra plugin has 112,999 LOC). As reported
in Table 4, 13 buggy code fragments are found from these two
decompilers.2 To clarify potential confusions on Table 4, recall to
decide the łcharacteristicsž of decompilation defects, we manually
analyzed decompiled C code w.r.t. its input seed. We summarized
erroneous code statements into five categories at our best effort in Table 3. Nevertheless, with root cause analysis, we find that de￾compiler bugs may cause different errors in decompiled code. For
instance, Bug8 is a type recovery bug in Radare2/Ghidra, directly
generating 31 decompiled C programs with type errors. Further￾more, given local variables of wrong types, optimization may treat
these variables as part of other variables (see Sec. 5.3.2), outputting
87 decompiled C programs with missing variable errors.
All of these findings are logic bugs, causing erroneous outputs
rather than decompiler crash or abnormal termination. From these
13 bugs, 12 are found from the łmiddle stagež of decompilation
(Sec. 2.1) where decompilers perform high-level program representation recovery, while one (Bug13 found in Radare2/Ghidra) is in
the C code generation phase: unsigned shift operation in the Ghidra
IR was lifted into a signed shift in C code. From the 12 middle stage
bugs, four bugs are in the type recovery modules, two bugs are in
the variable recovery modules, and six bugs are in the optimization
modules. Also, while Radare2/Ghidra is stated to leverage the disas￾sembly infrastructure of Radare2 and bridge with Ghidra, we find
that Radare2/Ghidra łfreeridesž the type recovery utility of Radare2.
Bug8 in Radare2/Ghidra indeed roots from incorrectly recovered
variable types in Radare2.
