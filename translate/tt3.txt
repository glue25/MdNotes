由于动态分析的覆盖范围限制，使用BinRec恢复的二进制文件在测试期间或部署后可能会遇到无法恢复的路径（请参阅第3.1节）。 BinRec通过强制恢复的二进制文件在遇到未恢复的路径时调用控制流未命中处理程序来处理这些控制流未命中。有几个控制流未命中处理程序可用。日志处理程序记录恢复的二进制文件中缺少的指令指针值，然后中止执行。当恢复的二进制文件和原始文件之间的差异比程序终止更危险时，此模式很有用。后备处理程序将执行从已接收的代码转移到输入二进制文件的原始代码中。这涉及将重新恢复的代码中的仿真CPU状态编组为原始二进制文件的物理状态（另请参见第3.3.1节），然后在预期的地址跳转到原始二进制文件。仅当原始二进制和恢复的二进制tar具有相同的体系结构时，此小姐处理程序才可用。对于需要程序检测而不会意外终止的用例来说，它是理想的选择。请注意，在缓解方案中，BinRec用于通过安全工具扩展提升的代码，这需要对其余二进制代码进行二进制级别的缓解。二进制缓解可能很重，因此效率很低。但是，由于后备代码不会被提升工作负荷所使用，因此它不会在热路径上。增量提升处理程序将记录的丢失指令指针反馈到动态提升引擎中，在动态提升引擎中，我们捕获一条覆盖新控制流边缘的跟踪，并将其与现有跟踪合并。使用这种增量提升范式，可以不断更新恢复的二进制文件。我们当前的增量提升原型可以提升指令，直到下一次有条件的控制流转移为止。恢复的程序可以调用后备遗漏处理程序或日志处理程序。同时，动态提升引擎可以在异步后台进程中通过记录的指令指针生成一个或多个新程序跟踪。我们合并了新的和现有的跟踪信息以生成新的恢复二进制文件。增量提升的一个优势是它可以直接提升新代码，而无需重现在提升过程中触发未命中的（显式或隐式）输入。考虑仅由于测试系统上不受约束的系统随机性而执行的程序功能。无需隔离和约束随机源，即可将其复制到提升系统上。或者，无需等待非确定性的模糊测试或约束执行技术即可通过新路径来推动执行。最后，当知道跟踪阶段已经覆盖了实现目标功能的所有路径时，可以完全优化未命中处理程序。这对于积极的优化方案很有用，在该方案中，已知提升输入涵盖所有必需的代码，而消除分支会带来新的优化机会。