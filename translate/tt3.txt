我们试图找出导致这些缺陷的反编译器中的错误代码片段。 IDA-Pro和JEB3是商业工具，因此我们无法执行根本原因分析。 Radare2 / Ghidra和RetDec都可以在线获取源代码，尽管仅提供了其随附的文档和代码注释。在此步骤中，我们花费了大量的精力（超过六个星期；总共约350个工时）来分析从RetDec中检测到的所有913（187 + 346 + 380）个反编译器缺陷（总计178,732 LOC）和所有179（53 + 126）Radare2 / Ghidra中的反编译器漏洞（Ghidra插件具有112,999 LOC）。如表4所示，从这两个反编译器中发现了13个错误代码片段。2为了澄清表4上的潜在混淆，我们回想起决定反编译缺陷的特征，我们手动分析了反编译的C代码w.r.t。它的输入种子。我们在表3中尽了最大的努力将错误的代码语句总结为五类。但是，通过根本原因分析，我们发现反编译器错误可能会在反编译代码中引起不同的错误。例如，Bug8是Radare2 / Ghidra中的类型恢复错误，它直接生成31个带有类型错误的反编译C程序。此外，给定错误类型的局部变量，优化可能会将这些变量视为其他变量的一部分（请参见第5.3.2节），输出87个反编译的C程序，这些程序缺少变量错误。所有这些发现都是逻辑错误，导致错误的输出，而不是反编译器崩溃或异常终止。从这13个错误中，从反编译的中间阶段（第2.1节）中发现了12个错误，其中反编译器执行高级程序表示恢复，而一个错误（在Radare2 / Ghidra中找到的Bug13）处于C代码生成阶段：无符号移位操作在Ghidra中，IR被提升为C代码的有符号移位。在12个中间阶段的错误中，类型恢复模块中包含4个错误，变量恢复模块中包含2个错误，优化模块中包含6个错误。同样，虽然Radar2 / Ghidra被认为可以利用Radare2的拆卸基础结构并与Ghidra进行桥接，但我们发现Radare2 / Ghidra和freeridess是Radare2的类型恢复实用程序。 Radare2 / Ghidra中的Bug8实际上源自Radare2中错误恢复的变量类型。